// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTiling: { value: [1, 1] }
        mainOffset: { value: [0, 0] }
        diffuseColor: { value: [1, 1, 1, 1], editor: {type: color} }
        specularColor: { value: [1, 1, 1, 1], editor: {type: color} }
        gloss: {value: 20}
        rampTex: { value: white }
        color: { value: [1, 1, 1, 1], editor: {type: color} }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>

  in vec2 a_texCoord;
  in vec4 a_color;
  out vec3 v_worldPos;
  out vec3 v_worldNormal;
  #if USE_TEXTURE
    out vec2 v_uv0;
  #endif
  uniform VsConstant {
    vec2 mainTiling;
    vec2 mainOffset;
  };
  
  mat3 transposeMat3(mat3 v) {
    mat3 tmp;
    tmp[0] = vec3(v[0].x, v[1].x, v[2].x);
    tmp[1] = vec3(v[0].y, v[1].y, v[2].y);
    tmp[2] = vec3(v[0].z, v[1].z, v[2].z);
    return tmp;
  }

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    vec4 position = In.position;
    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);
    v_worldPos = (matWorld * position).xyz;
    v_worldNormal = (matWorldIT * vec4(In.normal, 0.0)).xyz;
    #if USE_TEXTURE
      v_uv0 = a_texCoord * mainTiling + mainOffset;
    #endif
    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <cc-global>
  #include <texture-lod>
  in vec3 v_worldPos;
  in vec3 v_worldNormal;
  uniform FsConstant {
    vec4 diffuseColor;
    vec4 specularColor;
    vec4 color;
    float gloss;
  };
  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D rampTex;
  #endif

  vec4 frag () {
    vec3 lightDir = normalize(-cc_mainLitDir.xyz);
    vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);
    vec3 worldNormal = normalize(v_worldNormal);
    float halfLambert = 0.5 * dot(worldNormal, lightDir) + 0.5;
    vec3 ambient = cc_ambientGround.rgb;
    vec3 diffuse = cc_mainLitColor.rgb * diffuseColor.rgb * texture(rampTex, vec2(halfLambert, halfLambert)).xyz;
    vec3 halfDir = normalize(viewDir + lightDir);
    vec3 specular = cc_mainLitColor.rgb * specularColor.rgb * pow(max(0., dot(worldNormal, halfDir)), gloss);
    return vec4(ambient + diffuse + specular, 1);
  }
}%
