// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        _MainTex: { value: white }
        texSize: {value: [512, 512]}
        mainTiling: { value: [1, 1] }
        mainOffset: { value: [0, 0] }
        _EdgeOnly: {value: 1}
        _EdgeColor: { value: [1, 1, 1, 1], editor: {type: color} }
        _BackgroundColor: { value: [1, 1, 1, 1], editor: {type: color} }
      rasterizerState: {cullMode: none}
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>

  in vec2 a_texCoord;
  in vec4 a_color;
  out vec2 uvArr[9];
  #if USE_TEXTURE
    out vec2 v_uv0;
  #endif
  uniform VsConstant {
    vec2 mainTiling;
    vec2 mainOffset;
    vec2 texSize;
  };

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);
    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);
    vec4 position = In.position;
    #if USE_TEXTURE
      v_uv0 = a_texCoord * mainTiling + mainOffset;
    #endif
    vec2 texelSize = vec2(1./texSize.x, 1./texSize.y);
    uvArr[0] = v_uv0 + texelSize.xy * vec2(-1, -1);
    uvArr[1] = v_uv0 + texelSize.xy * vec2(0, -1);
    uvArr[2] = v_uv0 + texelSize.xy * vec2(1, -1);
    uvArr[3] = v_uv0 + texelSize.xy * vec2(-1, 0);
    uvArr[4] = v_uv0 + texelSize.xy * vec2(0, 0);
    uvArr[5] = v_uv0 + texelSize.xy * vec2(1, 0);
    uvArr[6] = v_uv0 + texelSize.xy * vec2(-1, 1);
    uvArr[7] = v_uv0 + texelSize.xy * vec2(0, 1);
    uvArr[8] = v_uv0 + texelSize.xy * vec2(1, 1);
    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%
CCProgram unlit-fs %{
  precision highp float;
  #include <cc-global>
  #include <texture-lod>
  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D _MainTex;
  #endif
  uniform FsConstant {
    vec4 _EdgeColor;
    vec4 _BackgroundColor;
    float _EdgeOnly;
  };
  in vec2 uvArr[9];

  float luminance(vec4 color) {
    return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b; 
  }

  float Sobel(){
    float Gx[9];
    Gx[0] = -1.;
    Gx[1] = 0.;
    Gx[2] = 1.;
    Gx[3] = -2.;
    Gx[4] = 0.;
    Gx[5] = 2.;
    Gx[6] = -1.;
    Gx[7] = 0.;
    Gx[8] = 1.;
    
    float Gy[9];
    Gy[0] = -1.;
    Gy[1] = -2.;
    Gy[2] = -1.;
    Gy[3] = 0.;
    Gy[4] = 0.;
    Gy[5] = 0.;
    Gy[6] = 1.;
    Gy[7] = 2.;
    Gy[8] = 1.;
    float texColor;
    float edgeX = 0.;
    float edgeY = 0.;
    for (int it = 0; it < 9; it++) {
      texColor = luminance(texture(_MainTex, uvArr[it]));
      edgeX += texColor * Gx[it];
      edgeY += texColor * Gy[it];
    }
    float edge = 1. - abs(edgeX) - abs(edgeY);
    return edge;
  }
  vec4 frag () {
    float edge = Sobel();
    
    vec4 withEdgeColor = mix(_EdgeColor, texture(_MainTex, uvArr[4]), edge);
    vec4 onlyEdgeColor = mix(_EdgeColor, _BackgroundColor, edge);
    return mix(withEdgeColor, onlyEdgeColor, _EdgeOnly);
    return vec4(withEdgeColor);
  }
}%
